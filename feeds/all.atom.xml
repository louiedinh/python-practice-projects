<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python Practice Projects</title><link href="http://pythonpracticeprojects.com/" rel="alternate"></link><link href="http://pythonpracticeprojects.com/feeds/all.atom.xml" rel="self"></link><id>http://pythonpracticeprojects.com/</id><updated>2013-09-20T00:00:00+02:00</updated><entry><title>How Benjamin Franklin Would've Learned To Program</title><link href="http://pythonpracticeprojects.com/how-benjamin-franklin-learned-to-program.html" rel="alternate"></link><updated>2013-09-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-09-20:how-benjamin-franklin-learned-to-program.html</id><summary type="html">&lt;p&gt;Good programming is notoriously difficult to teach. Programming books generally
all start out in the same way: "Here is an example of an X, and here is an
example.". Teaching the building blocks is easy. There are only so many. The hard part is
teaching the consequences of each choice. The common advice is to write a lot of code to get good.
This is necessary but not sufficient. To learn we still need to decide what code to write,
and how to improve that code.&lt;/p&gt;
&lt;p&gt;We will explore the closely related field of writing to get advice on improving our craft.
In many ways programming is like writing. Both are centrally concerned with getting your
thoughts down into an easily communicated form. We find both hard because our ideas are
densly cross-linked whereas text is depressingly linear. The infinite variety of ways in 
which thoughts can be represented in text makes learning the art of writing, as well as
programming, difficult.  &lt;/p&gt;
&lt;p&gt;Thankfully, Benjamin Franklin recorded a method that he used to develop
proficiency. As evidence of his writing prowess, we need only look at the 
Amazon Biography best seller's list.  His biography is still one of the best selling 
books after x hundred years. If that's not proof then I don't know what is.&lt;/p&gt;
&lt;p&gt;Benjamin developed his method in his early teens and worked hard at practicing his craft.
Here is the exceprt with a few added line breaks for legibility.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;About this time I met with an odd volume of the Spectator. It was the third. I had never before seen any of them.
I bought it, read it over and over, and was much delighted with it. I thought the writing excellent, and wished, if possible, to imitate it.&lt;/p&gt;
&lt;p&gt;With this view I took some of the papers, and, making short hints of the sentiment in each sentence, 
laid them by a few days, and then, without looking at the book, try'd to compleat the papers again,
by expressing each hinted sentiment at length, and as fully as it had been expressed before,
in any suitable words that should come to hand. Then I compared my Spectator with the original,
discovered some of my faults, and corrected them.&lt;/p&gt;
&lt;p&gt;But I found I wanted a stock of words, or a readiness in recollecting and using them, which I thought
I should have acquired before that time if I had gone on making verses; since the continual occasion for
words of the same import, but of different length, to suit the measure, or of different sound for the rhyme,
would have laid me under a constant necessity of searching for variety, and also have tended to fix that
variety in my mind, and make me master of it. Therefore I took some of the tales and turned them into verse;
and, after a time, when I had pretty well forgotten the prose, turned them back again. I also sometimes jumbled
my collections of hints into confusion, and after some weeks endeavored to reduce them into the best order,
before I began to form the full sentences and compleat the paper. This was to teach me method in the arrangement of thoughts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Benjamin Franklin Programming Practice Model&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Find a program that you greatly admire and read it.&lt;/li&gt;
&lt;li&gt;Takes note on the roles, inputs, and outputs of each major component.&lt;/li&gt;
&lt;li&gt;Take notes on how the components interact.&lt;/li&gt;
&lt;li&gt;Rewrite the program.&lt;/li&gt;
&lt;li&gt;Compare your code with the original.&lt;/li&gt;
&lt;li&gt;Note where you can improve and study acccordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You don't get better at programming by just writing more programs. You get better by studying
great programs, and then trying to imitate them.&lt;/p&gt;
&lt;p&gt;How do you get better at programming? Tweet me (@practicepython) your practice methods. I would
love to hear how you practice our craft of programming.&lt;/p&gt;
&lt;p&gt;Oh and if you found this helpful, please share it with your friends. Sharing is caring :]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/share" class="twitter-share-button" data-text="How Benjamin Franklin would've learned to program." data-via="louiedinh" data-hashtags="practiceprogramming"&gt;Tweet&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');&lt;/script&gt;&lt;/p&gt;</summary><category term="practice"></category><category term="writing"></category><category term="benjamin-franklin"></category></entry><entry><title>Just In Case Versus Just In Time Learning</title><link href="http://pythonpracticeprojects.com/just-in-case-vs-just-in-time.html" rel="alternate"></link><updated>2013-09-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-09-20:just-in-case-vs-just-in-time.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Self-education is, I firmly believe, the only kind of education there is.
― Isaac Asimov&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every human is born with a super power: the ability to learn. Everything you
know is learned. Like all important endeavours, a lifetime of learning merits
some planning. We will classify the types of learning and then explore the
effective use of your super power.&lt;/p&gt;
&lt;p&gt;In very broad strokes, learning can be split into two categories: Just-In-Time
and Just-In-Case. School is the perfect example of Just-In-Case learning. You
are asked to do algebra, read Chaucer and argue against a geocentric universe.
Don’t you dare ask why. There is no reason. Or the reason is in some distant
future that probably isn’t going to happen anyway.On the other hand, work is an
example of Just-In-Time learning. On your first day, you have no clue how to do
the job. So you watch, and you copy and you finish the task. Why are you
learning? To get the job done because your livelihood depends on it. The
rewards are very concrete.&lt;/p&gt;
&lt;p&gt;At the heart of this split is the question of value. When will this learning
pay off? Just-In-Time learning creates immediate value. You’re learning to surf
because you have a vacation booked in two weeks. You’re reading a book because
you have a book club meeting to attend. We will consider value as simply
something that you want to have. The thing can be enjoyment, fun, fame, money,
or appearing attractive. Whatever floats your boat. Just-In-Case learning is a
risky delayed value proposition. You’re not certain it’s going to pay off. Will
studying algebra make you attractive to the opposite sex? Only time will tell.&lt;/p&gt;
&lt;p&gt;Now if you’re reading to figure out which is the One True Way, I’m going to
disappoint you. Neither Just -In-Time nor Just-In-Case is better. Schools
preach only Just-In-Case methodology. Work argues exclusively for Just-In-Time
chops. Both are lying to you.&lt;/p&gt;
&lt;p&gt;The optimal strategy comes from sound investment principles: diversify. Like
investing, allocating your capital across different asset classes with
different risk/reward profiles tends to maximize return while minimizing risk.
&lt;a href="https://www.amazon.com/dp/0071362363/ref=as_li_qf_sp_asin_til?tag=homebits04-20&amp;amp;camp=0&amp;amp;creative=0&amp;amp;linkCode=as1&amp;amp;creativeASIN=0071362363&amp;amp;adid=1BP197D23ZSJBKKX32M8&amp;amp;"&gt;[Intelligent Asset Allocator]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just-In-Time learning is like buying bonds. Safe investments that gives a very
predictable reward. You know what you need to know. You learn it. You get the
pay off. It’s all money in the bank.&lt;/p&gt;
&lt;p&gt;Just-In-Case learning is more risky, like stocks. You learn something and
expect a future reward. The future comes and you guessed wrong. D’oh. However,
once in a while you run across a problem that is solvable by something you
learned Just-in-Case. You bust out your mental tools and annihilate the
offending issue. Everyone looks at you in bewilderment and think that you must
be a goddamn genius. Boom. Just-In-Case learning. The beauty of Just-In-Case is
most stunning when applied to notoriously difficult subjects like mathematics,
programming or writing. Achieving mastery in each field requires an inordinate
amount of time. When you run into a thorny programming problem, you can’t run
off for 10 years to self educate.&lt;a href="http://norvig.com/21-days.html"&gt;[Teach Yourself Programming in 10
Years]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s up to you to determine the right mix of risky versus safe investments I
suggest using Just-In-Time learning until you are generating enough value to
sustain your lifestyle. Then invest in Just-In-Case learning and swing for the
fences.&lt;/p&gt;</summary><category term="learning"></category></entry></feed>