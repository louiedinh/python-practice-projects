<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Python Practice Projects</title><link href="http://pythonpracticeprojects.com/" rel="alternate"></link><link href="http://pythonpracticeprojects.com/feeds/blog.atom.xml" rel="self"></link><id>http://pythonpracticeprojects.com/</id><updated>2014-09-04T00:00:00+02:00</updated><entry><title>Bookshelves of Famous Programmers</title><link href="http://pythonpracticeprojects.com/programmer-bookshelves.html" rel="alternate"></link><updated>2014-09-04T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2014-09-04:programmer-bookshelves.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="n"&gt;whole&lt;/span&gt; &lt;span class="n"&gt;life&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;known&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;wise&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt; &lt;span class="n"&gt;who&lt;/span&gt; &lt;span class="n"&gt;didn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;none&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Charlie&lt;/span&gt; &lt;span class="n"&gt;Munger&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As technologists surrounded by the latest and greatest, we tend to overlook one of the most important technologies of human history: the humble book. I'm not sure if it's
just sampling bias, but readers are sparse in my programming circles. IMHO, it's a bit of a waste because books offer one of the greatest opportunities to increase your
skills by leaps and bounds.&lt;/p&gt;
&lt;p&gt;If someone asked you, "Would you pay $5,000 for one of the world's greatest programmers to be your mentor for the next three months?", what would you say? Probably "Hell Yeah!". 
If the same choice was offered, except this time it's $50 and you have to read, would you still agree? &lt;/p&gt;
&lt;p&gt;Studying a great book is like being taken under the wings of a great mentor. Many great programmers, with centuries of experience between them, chose to distill their 
wisdom into portable, if slightly water sensitive, packages for your reading pleasure. Why would you &lt;em&gt;not&lt;/em&gt; feast on this buffet of collected knowledge? &lt;/p&gt;
&lt;p&gt;Here are the recommendations of some top programmers in the field. Take special notice of how some books keep coming up over and over again.&lt;/p&gt;
&lt;p&gt;Also, thanks to Bob Belderbos for building this amazing visualization and Brain Pickings for the inspiring the design. &lt;/p&gt;
&lt;style&gt;
     ul {
         list-style-type: none;
         padding: 0px; margin: 0px;
     }
     #shelf {
         width: 600px;
     }
     #shelf li, #shelf li img {
         height: 168px;
         width: 128px;
     }
     #shelf li {
         float: left;
         padding: 0 25px;
         margin: 15px 0;
         border-bottom: 12px solid black;
     }

    p.clear {
        clear:both;
    }
&lt;/style&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt; Joel Spolsky&lt;/h2&gt;

&lt;ul id='shelf'&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Peopleware'&gt;&lt;img src='http://bks9.books.google.com/books?id=TVQUAAAAQBAJ&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Peopleware'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Rapid Development'&gt;&lt;img src='http://bks6.books.google.com/books?id=nbrae6-9XWAC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Rapid Development'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Code Complete'&gt;&lt;img src='http://bks1.books.google.com/books?id=3JfE7TGUwvgC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='Code Complete'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Pragmatic Programmer'&gt;&lt;img src='http://bks2.books.google.com/books?id=5wBQEp6ruIAC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Pragmatic Programmer'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Mythical Man-Month, Anniversary Edition'&gt;&lt;img src='http://bks4.books.google.com/books?id=Yq35BY5Fk3gC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Mythical Man-Month, Anniversary Edition'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p class="clear"&gt;

&lt;h2&gt;Steve Yegge&lt;/h2&gt;

&lt;ul id='shelf'&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Pragmatic Programmer'&gt;&lt;img src='http://bks2.books.google.com/books?id=5wBQEp6ruIAC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Pragmatic Programmer'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Refactoring'&gt;&lt;img src='http://bks1.books.google.com/books?id=HmrDHwgkbPsC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Refactoring'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Design Patterns'&gt;&lt;img src='http://bks7.books.google.com/books?id=6oHuKQe3TjQC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Design Patterns'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Concurrent Programming in Java'&gt;&lt;img src='http://bks9.books.google.com/books?id=-x1S4neCSOYC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Concurrent Programming in Java'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Mastering Regular Expressions'&gt;&lt;img src='http://bks3.books.google.com/books?id=sshKXlr32-AC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Mastering Regular Expressions'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Algorithm Design Manual'&gt;&lt;img src='http://bks8.books.google.com/books?id=7XUSn0IKQEgC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Algorithm Design Manual'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=C Programming Language'&gt;&lt;img src='http://bks0.books.google.com/books?id=Yi5FI5QcdmYC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='C Programming Language'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Little Schemer'&gt;&lt;img src='http://bks6.books.google.com/books?id=xyO-KLexVnMC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Little Schemer'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Compilers'&gt;&lt;img src='http://bks0.books.google.com/books?id=NTIrAAAAQBAJ&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Compilers'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="clear"&gt;

&lt;h2&gt;Scott Hanselman&lt;/h2&gt;

&lt;ul id='shelf'&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Code Complete'&gt;&lt;img src='http://bks1.books.google.com/books?id=3JfE7TGUwvgC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='Code Complete'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Pragmatic Programmer'&gt;&lt;img src='http://bks2.books.google.com/books?id=5wBQEp6ruIAC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Pragmatic Programmer'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Programming Pearls'&gt;&lt;img src='http://bks7.books.google.com/books?id=kse_7qbWbjsC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Programming Pearls'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Refactoring'&gt;&lt;img src='http://bks1.books.google.com/books?id=HmrDHwgkbPsC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Refactoring'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Design of the UNIX Operating System'&gt;&lt;img src='http://bks4.books.google.com/books?id=BxZpQgAACAAJ&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='The Design of the UNIX Operating System'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Design Patterns'&gt;&lt;img src='http://bks7.books.google.com/books?id=6oHuKQe3TjQC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Design Patterns'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="clear"&gt;

&lt;h2&gt;Stack Overflow Community&lt;/h2&gt;

&lt;ul id='shelf'&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Code Complete'&gt;&lt;img src='http://bks1.books.google.com/books?id=3JfE7TGUwvgC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='Code Complete'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Pragmatic Programmer'&gt;&lt;img src='http://bks2.books.google.com/books?id=5wBQEp6ruIAC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Pragmatic Programmer'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Structure and Interpretation of Computer Programs'&gt;&lt;img src='http://bks7.books.google.com/books?id=6QOXQgAACAAJ&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='Structure and Interpretation of Computer Programs'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=C Programming Language'&gt;&lt;img src='http://bks0.books.google.com/books?id=Yi5FI5QcdmYC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;source=gbs_api' alt='C Programming Language'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Introduction To Algorithms'&gt;&lt;img src='http://bks0.books.google.com/books?id=NLngYyWFl_YC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Introduction To Algorithms'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Design Patterns'&gt;&lt;img src='http://bks7.books.google.com/books?id=6oHuKQe3TjQC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Design Patterns'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=Refactoring'&gt;&lt;img src='http://bks1.books.google.com/books?id=HmrDHwgkbPsC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='Refactoring'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href='http://www.amazon.com/gp/search/ref=sr_adv_b/?search-alias=stripbooks&amp;field-title=The Mythical Man-Month, Anniversary Edition'&gt;&lt;img src='http://bks4.books.google.com/books?id=Yq35BY5Fk3gC&amp;printsec=frontcover&amp;img=1&amp;zoom=1&amp;edge=curl&amp;source=gbs_api' alt='The Mythical Man-Month, Anniversary Edition'&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class="clear"&gt;</summary><category term="learning"></category></entry><entry><title>Getopt - A Case Study in Reading Source</title><link href="http://pythonpracticeprojects.com/getopt-case-study.html" rel="alternate"></link><updated>2014-07-19T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2014-07-19:getopt-case-study.html</id><summary type="html">&lt;p&gt;To get better at reading source code, you just have to do it more often.&lt;/p&gt;
&lt;p&gt;Here is an example annotation that I did while reading the source
for getopt, a deprecated Python Standard Library module. Despite
the simplicity, I picked up a few golden stylistic tips and abstraction
techniques that I still use in my programming today.&lt;/p&gt;
&lt;p&gt;All of my annotations start with ##. The original author's comments
is written with #.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Parser for command line options.&lt;/span&gt;

&lt;span class="s2"&gt;This module helps scripts to parse the command line arguments in&lt;/span&gt;
&lt;span class="s2"&gt;sys.argv.  It supports the same conventions as the Unix getopt()&lt;/span&gt;
&lt;span class="s2"&gt;function (including the special meanings of arguments of the form `-&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;and `--&amp;#39;).  Long options similar to those supported by GNU software&lt;/span&gt;
&lt;span class="s2"&gt;may be used as well via an optional third argument.  This module&lt;/span&gt;
&lt;span class="s2"&gt;provides two functions and an exception:&lt;/span&gt;

&lt;span class="s2"&gt;getopt() -- Parse command line options&lt;/span&gt;
&lt;span class="s2"&gt;gnu_getopt() -- Like getopt(), but allow option and non-option arguments&lt;/span&gt;
&lt;span class="s2"&gt;to be intermixed.&lt;/span&gt;
&lt;span class="s2"&gt;GetoptError -- exception (class) raised with &amp;#39;opt&amp;#39; attribute, which is the&lt;/span&gt;
&lt;span class="s2"&gt;option involved with the exception.&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Long&lt;/span&gt; &lt;span class="s-Atom"&gt;option&lt;/span&gt; &lt;span class="s-Atom"&gt;support&lt;/span&gt; &lt;span class="s-Atom"&gt;added&lt;/span&gt; &lt;span class="s-Atom"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;Lars&lt;/span&gt; &lt;span class="nv"&gt;Wirzenius&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;liw@iki&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;fi&amp;gt;.&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Gerrit&lt;/span&gt; &lt;span class="nv"&gt;Holl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;gerrit@nl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;linux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s-Atom"&gt;moved&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;string&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;based&lt;/span&gt; &lt;span class="s-Atom"&gt;exceptions&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;class&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;based&lt;/span&gt; &lt;span class="s-Atom"&gt;exceptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Peter&lt;/span&gt; &lt;span class="s-Atom"&gt;Åstrand&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;astrand@lysator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;liu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;se&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s-Atom"&gt;added&lt;/span&gt; &lt;span class="nf"&gt;gnu_getopt&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;TODO&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="nf"&gt;gnu_getopt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;GNU&lt;/span&gt; &lt;span class="s-Atom"&gt;getopt_long_only&lt;/span&gt; &lt;span class="s-Atom"&gt;mechanism&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;allow&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;caller&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;specify&lt;/span&gt; &lt;span class="s-Atom"&gt;ordering&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;RETURN_IN_ORDER&lt;/span&gt; &lt;span class="s-Atom"&gt;option&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nv"&gt;GNU&lt;/span&gt; &lt;span class="s-Atom"&gt;extension&lt;/span&gt; &lt;span class="s-Atom"&gt;with&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="s-Atom"&gt;as&lt;/span&gt; &lt;span class="s-Atom"&gt;first&lt;/span&gt; &lt;span class="s-Atom"&gt;character&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;option&lt;/span&gt; &lt;span class="s-Atom"&gt;string&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;optional&lt;/span&gt; &lt;span class="s-Atom"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;specified&lt;/span&gt; &lt;span class="s-Atom"&gt;by&lt;/span&gt; &lt;span class="s-Atom"&gt;double&lt;/span&gt; &lt;span class="s-Atom"&gt;colons&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;option&lt;/span&gt; &lt;span class="s-Atom"&gt;string&lt;/span&gt; &lt;span class="s-Atom"&gt;with&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;W&lt;/span&gt; &lt;span class="s-Atom"&gt;followed&lt;/span&gt; &lt;span class="s-Atom"&gt;by&lt;/span&gt; &lt;span class="s-Atom"&gt;semicolon&lt;/span&gt; &lt;span class="s-Atom"&gt;should&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;   &lt;span class="s-Atom"&gt;treat&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-W foo&amp;quot;&lt;/span&gt; &lt;span class="s-Atom"&gt;as&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--foo&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s-Atom"&gt;all__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GetoptError&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getopt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;gnu_getopt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="s-Atom"&gt;import&lt;/span&gt; &lt;span class="s-Atom"&gt;os&lt;/span&gt;

&lt;span class="s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="s-Atom"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;opt=&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;msg&lt;/span&gt;
        &lt;span class="s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt;
        &lt;span class="nv"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;msg&lt;/span&gt;

&lt;span class="s-Atom"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt; &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;backward&lt;/span&gt; &lt;span class="s-Atom"&gt;compatibility&lt;/span&gt;

&lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;longopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;getopt(args, options[, long_options]) -&amp;gt; opts, args&lt;/span&gt;

&lt;span class="s2"&gt;    Parses command line options and parameter list.  args is the&lt;/span&gt;
&lt;span class="s2"&gt;    argument list to be parsed, without the leading reference to the&lt;/span&gt;
&lt;span class="s2"&gt;    running program.  Typically, this means &amp;quot;&lt;/span&gt;&lt;span class="s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.  shortopts&lt;/span&gt;
&lt;span class="s2"&gt;    is the string of option letters that the script wants to&lt;/span&gt;
&lt;span class="s2"&gt;    recognize, with options that require an argument followed by a&lt;/span&gt;
&lt;span class="s2"&gt;    colon (i.e., the same format that Unix getopt() uses).  If&lt;/span&gt;
&lt;span class="s2"&gt;    specified, longopts is a list of strings with the names of the&lt;/span&gt;
&lt;span class="s2"&gt;    long options which should be supported.  The leading &amp;#39;--&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;    characters should not be included in the option name.  Options&lt;/span&gt;
&lt;span class="s2"&gt;    which require an argument should be followed by an equal sign&lt;/span&gt;
&lt;span class="s2"&gt;    (&amp;#39;=&amp;#39;).&lt;/span&gt;

&lt;span class="s2"&gt;    The return value consists of two elements: the first is a list of&lt;/span&gt;
&lt;span class="s2"&gt;    (option, value) pairs; the second is the list of program arguments&lt;/span&gt;
&lt;span class="s2"&gt;    left after the option list was stripped (this is a trailing slice&lt;/span&gt;
&lt;span class="s2"&gt;    of the first argument).  Each option-and-value pair returned has&lt;/span&gt;
&lt;span class="s2"&gt;    the option as its first element, prefixed with a hyphen (e.g.,&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;#39;-x&amp;#39;), and the option argument as its second element, or an empty&lt;/span&gt;
&lt;span class="s2"&gt;    string if the option has no argument.  The options occur in the&lt;/span&gt;
&lt;span class="s2"&gt;    list in the same order in which they were found, thus allowing&lt;/span&gt;
&lt;span class="s2"&gt;    multiple occurrences.  Long and short options may be mixed.&lt;/span&gt;

&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;opts&lt;/span&gt; &lt;span class="s-Atom"&gt;holds&lt;/span&gt; &lt;span class="s-Atom"&gt;all&lt;/span&gt; &lt;span class="s-Atom"&gt;options&lt;/span&gt; &lt;span class="s-Atom"&gt;parsed&lt;/span&gt; &lt;span class="s-Atom"&gt;so&lt;/span&gt; &lt;span class="s-Atom"&gt;far&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt; &lt;span class="s-Atom"&gt;holds&lt;/span&gt; &lt;span class="s-Atom"&gt;all&lt;/span&gt; &lt;span class="s-Atom"&gt;unparsed&lt;/span&gt; &lt;span class="s-Atom"&gt;data&lt;/span&gt;

    &lt;span class="s-Atom"&gt;opts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;longopts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nf"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;longopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;longopts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nn"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;longopts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;longopts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s-Atom"&gt;while&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;-&amp;#39;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="s-Atom"&gt;are&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;something&lt;/span&gt; &lt;span class="nn"&gt;like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;b&lt;/span&gt; &lt;span class="s-Atom"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;c&lt;/span&gt; &lt;span class="s-Atom"&gt;--ef&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;positional&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;positional&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;This&lt;/span&gt; &lt;span class="s-Atom"&gt;loop&lt;/span&gt; &lt;span class="s-Atom"&gt;instantly&lt;/span&gt; &lt;span class="s-Atom"&gt;stops&lt;/span&gt; &lt;span class="s-Atom"&gt;at&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;or&lt;/span&gt; &lt;span class="s-Atom"&gt;any&lt;/span&gt; &lt;span class="s-Atom"&gt;none&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nf"&gt;flagged&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;starts&lt;/span&gt; &lt;span class="s-Atom"&gt;with&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Loop&lt;/span&gt; &lt;span class="nv"&gt;Invariant&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;All&lt;/span&gt; &lt;span class="s-Atom"&gt;options&lt;/span&gt; &lt;span class="s-Atom"&gt;seen&lt;/span&gt; &lt;span class="s-Atom"&gt;have&lt;/span&gt; &lt;span class="s-Atom"&gt;been&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;successfully&lt;/span&gt; &lt;span class="s-Atom"&gt;parsed&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;stored&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Exit&lt;/span&gt; &lt;span class="nv"&gt;Condition&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Either&lt;/span&gt; &lt;span class="s-Atom"&gt;no&lt;/span&gt; &lt;span class="s-Atom"&gt;arguments&lt;/span&gt; &lt;span class="nf"&gt;left&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;or&lt;/span&gt; &lt;span class="s-Atom"&gt;next&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;be&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;parsed&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;either&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;positional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;or&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;--&amp;#39;&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Main&lt;/span&gt; &lt;span class="nn"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Consume&lt;/span&gt; &lt;span class="s-Atom"&gt;one&lt;/span&gt; &lt;span class="s-Atom"&gt;optional&lt;/span&gt; &lt;span class="s-Atom"&gt;parameter&lt;/span&gt;

        &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;--&amp;#39;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Stop&lt;/span&gt; &lt;span class="s-Atom"&gt;at&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;--&amp;#39;&lt;/span&gt; &lt;span class="s-Atom"&gt;but&lt;/span&gt; &lt;span class="nv"&gt;DON&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;T include it in the returned arguments&lt;/span&gt;
&lt;span class="s-Atom"&gt;    ## i.e &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;b&lt;/span&gt; &lt;span class="s-Atom"&gt;--&lt;/span&gt; &lt;span class="s-Atom"&gt;c&lt;/span&gt; &lt;span class="s-Atom"&gt;d&amp;#39; returns options=(a,b) and args=(c,d) &lt;/span&gt;
&lt;span class="s-Atom"&gt;    ## if it was &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;c&lt;/span&gt; &lt;span class="s-Atom"&gt;d&amp;#39; you would get options=(a,b) args=(-, c, d)&lt;/span&gt;

&lt;span class="s-Atom"&gt;        args = args[1:]&lt;/span&gt;
&lt;span class="s-Atom"&gt;            break&lt;/span&gt;
&lt;span class="s-Atom"&gt;        if args[0].startswith(&amp;#39;--&amp;#39;):&lt;/span&gt;

&lt;span class="s-Atom"&gt;    ## handle &amp;#39;--long_option&amp;#39; case&lt;/span&gt;
&lt;span class="s-Atom"&gt;    ## Strip off the &amp;#39;--&amp;#39; from the argument before passing it to do_longs&lt;/span&gt;

&lt;span class="s-Atom"&gt;            opts, args = do_longs(opts, args[0][2:], longopts, args[1:])&lt;/span&gt;
&lt;span class="s-Atom"&gt;        else:&lt;/span&gt;

&lt;span class="s-Atom"&gt;    ## Handle &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;o&amp;#39; case&lt;/span&gt;
&lt;span class="s-Atom"&gt;    ## Pass in opts so far, first optional arg w/o the leading &amp;#39;-&amp;#39;,&lt;/span&gt;
&lt;span class="s-Atom"&gt;    ##  handled shortopts, all other args&lt;/span&gt;

&lt;span class="s-Atom"&gt;            opts, args = do_shorts(opts, args[0][1:], shortopts, args[1:])&lt;/span&gt;

&lt;span class="s-Atom"&gt;    return opts, args&lt;/span&gt;

&lt;span class="s-Atom"&gt;def do_longs(opts, opt, longopts, args):&lt;/span&gt;
&lt;span class="s-Atom"&gt;    try:&lt;/span&gt;

&lt;span class="s-Atom"&gt;    ## If = is in the argument, this opt should take an argument&lt;/span&gt;

&lt;span class="s-Atom"&gt;        i = opt.index(&amp;#39;=&amp;#39;)&lt;/span&gt;
&lt;span class="s-Atom"&gt;    except ValueError:&lt;/span&gt;

&lt;span class="s-Atom"&gt;    ## None = means no argument&lt;/span&gt;

&lt;span class="s-Atom"&gt;        optarg = None&lt;/span&gt;
&lt;span class="s-Atom"&gt;    else:&lt;/span&gt;

&lt;span class="s-Atom"&gt;    ## Split the argument into parts. opt is stuff before the &amp;#39;=&amp;#39; and &lt;/span&gt;
&lt;span class="s-Atom"&gt;    ## optarg is stuff after the =.&lt;/span&gt;
&lt;span class="s-Atom"&gt;    ## E.g opt=&amp;quot;outfile=result.txt&amp;quot; --&amp;gt; opt = &amp;quot;outfile&amp;quot; optarg = &amp;quot;result.txt&amp;quot;&lt;/span&gt;

&lt;span class="s-Atom"&gt;        opt, optarg = opt[:i], opt[i+1:]&lt;/span&gt;

&lt;span class="s-Atom"&gt;    # Check that this specific opt should take an argument&lt;/span&gt;
&lt;span class="s-Atom"&gt;    has_arg, opt = long_has_args(opt, longopts)&lt;/span&gt;
&lt;span class="s-Atom"&gt;    if has_arg:&lt;/span&gt;
&lt;span class="s-Atom"&gt;        if optarg is None:&lt;/span&gt;
&lt;span class="s-Atom"&gt;            if not args:&lt;/span&gt;

&lt;span class="s-Atom"&gt;    ## No more arguments after this long option.&lt;/span&gt;
&lt;span class="s-Atom"&gt;    ##  We didn&amp;#39;t&lt;/span&gt; &lt;span class="s-Atom"&gt;get&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; &lt;span class="s-Atom"&gt;we&lt;/span&gt; &lt;span class="s-Atom"&gt;expected&lt;/span&gt;

                &lt;span class="s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;option --%s requires argument&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% opt, opt)&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;If&lt;/span&gt; &lt;span class="s-Atom"&gt;there&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;an&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;put&lt;/span&gt; &lt;span class="s-Atom"&gt;it&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;optarg&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;move&lt;/span&gt; &lt;span class="s-Atom"&gt;arg&lt;/span&gt; &lt;span class="s-Atom"&gt;forward&lt;/span&gt;

            &lt;span class="s-Atom"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="s-Atom"&gt;elif&lt;/span&gt; &lt;span class="nn"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Got&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; &lt;span class="s-Atom"&gt;when&lt;/span&gt; &lt;span class="s-Atom"&gt;we&lt;/span&gt; &lt;span class="s-Atom"&gt;didn&amp;#39;t expect one&lt;/span&gt;

&lt;span class="s-Atom"&gt;        raise GetoptError(&amp;#39;option&lt;/span&gt; &lt;span class="s-Atom"&gt;--&lt;/span&gt;&lt;span class="c1"&gt;%s must not have an argument&amp;#39; % opt, opt)&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Append&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;optarg&lt;/span&gt; &lt;span class="s-Atom"&gt;with&lt;/span&gt; &lt;span class="s-Atom"&gt;appropriate&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;

    &lt;span class="s-Atom"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;--&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;optarg&lt;/span&gt; &lt;span class="s-Atom"&gt;or&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="s-Atom"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;

&lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Return&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;   &lt;span class="s-Atom"&gt;has_arg?&lt;/span&gt;
&lt;span class="s-Atom"&gt;#&lt;/span&gt;   &lt;span class="s-Atom"&gt;full&lt;/span&gt; &lt;span class="s-Atom"&gt;option&lt;/span&gt; &lt;span class="s-Atom"&gt;name&lt;/span&gt;
&lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;long_has_args&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;longopts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Returns&lt;/span&gt; &lt;span class="nf"&gt;has_arg&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Returns&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;full&lt;/span&gt; &lt;span class="s-Atom"&gt;option&lt;/span&gt; &lt;span class="s-Atom"&gt;name&lt;/span&gt; &lt;span class="s-Atom"&gt;given&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;shorter&lt;/span&gt; &lt;span class="s-Atom"&gt;prefix&lt;/span&gt;

    &lt;span class="s-Atom"&gt;possibilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;o&lt;/span&gt; &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;o&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;longopts&lt;/span&gt; &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;o&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="nn"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;option --%s not recognized&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% opt, opt)&lt;/span&gt;
    &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;Is&lt;/span&gt; &lt;span class="s-Atom"&gt;there&lt;/span&gt; &lt;span class="s-Atom"&gt;an&lt;/span&gt; &lt;span class="s-Atom"&gt;exact&lt;/span&gt; &lt;span class="s-Atom"&gt;match?&lt;/span&gt;
    &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt;
    &lt;span class="s-Atom"&gt;elif&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nn"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt;
    &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;No&lt;/span&gt; &lt;span class="s-Atom"&gt;exact&lt;/span&gt; &lt;span class="s-Atom"&gt;match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;so&lt;/span&gt; &lt;span class="s-Atom"&gt;better&lt;/span&gt; &lt;span class="s-Atom"&gt;be&lt;/span&gt; &lt;span class="s-Atom"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="nv"&gt;XXX&lt;/span&gt; &lt;span class="s-Atom"&gt;since&lt;/span&gt; &lt;span class="s-Atom"&gt;possibilities&lt;/span&gt; &lt;span class="s-Atom"&gt;contains&lt;/span&gt; &lt;span class="s-Atom"&gt;all&lt;/span&gt; &lt;span class="s-Atom"&gt;valid&lt;/span&gt; &lt;span class="s-Atom"&gt;continuations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;might&lt;/span&gt; &lt;span class="s-Atom"&gt;be&lt;/span&gt;
        &lt;span class="s-Atom"&gt;#&lt;/span&gt; &lt;span class="s-Atom"&gt;nice&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;work&lt;/span&gt; &lt;span class="s-Atom"&gt;them&lt;/span&gt; &lt;span class="s-Atom"&gt;into&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;error&lt;/span&gt; &lt;span class="s-Atom"&gt;msg&lt;/span&gt;
        &lt;span class="s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;option --%s not a unique prefix&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% opt, opt)&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Assert&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;clearly&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="s-Atom"&gt;necessary&lt;/span&gt; &lt;span class="s-Atom"&gt;because&lt;/span&gt; &lt;span class="s-Atom"&gt;we&lt;/span&gt; &lt;span class="s-Atom"&gt;checked&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;possibilities&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;possibilities&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Serves&lt;/span&gt; &lt;span class="s-Atom"&gt;as&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;clever&lt;/span&gt; &lt;span class="s-Atom"&gt;comment&lt;/span&gt;

    &lt;span class="s-Atom"&gt;assert&lt;/span&gt; &lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="s-Atom"&gt;unique_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;possibilities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="s-Atom"&gt;has_arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;unique_match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;has_arg:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;unique_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;unique_match&lt;/span&gt;&lt;span class="p"&gt;[:-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="s-Atom"&gt;has_arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;unique_match&lt;/span&gt;

&lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_shorts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;short&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; &lt;span class="s-Atom"&gt;or&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;list&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;short&lt;/span&gt; &lt;span class="s-Atom"&gt;arguments&lt;/span&gt; &lt;span class="s-Atom"&gt;like&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;abcd&lt;/span&gt; &lt;span class="s-Atom"&gt;with&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="s-Atom"&gt;prefix&lt;/span&gt; &lt;span class="s-Atom"&gt;removed&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Process&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;whole&lt;/span&gt; &lt;span class="s-Atom"&gt;piece&lt;/span&gt;

    &lt;span class="s-Atom"&gt;while&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;:&lt;/span&gt;

        &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Remove&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;first&lt;/span&gt; &lt;span class="s-Atom"&gt;letter&lt;/span&gt; &lt;span class="s-Atom"&gt;from&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt;

        &lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Check&lt;/span&gt; &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;even&lt;/span&gt; &lt;span class="s-Atom"&gt;an&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;

        &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="nf"&gt;short_has_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;If&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;followed&lt;/span&gt; &lt;span class="s-Atom"&gt;by&lt;/span&gt; &lt;span class="s-Atom"&gt;an&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;

            &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;:&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;We&lt;/span&gt; &lt;span class="s-Atom"&gt;are&lt;/span&gt; &lt;span class="s-Atom"&gt;parsing&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;flag&lt;/span&gt; &lt;span class="s-Atom"&gt;with&lt;/span&gt; &lt;span class="s-Atom"&gt;an&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;This&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;case&lt;/span&gt; &lt;span class="s-Atom"&gt;where&lt;/span&gt; &lt;span class="s-Atom"&gt;there&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;space&lt;/span&gt; &lt;span class="s-Atom"&gt;between&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;flag&lt;/span&gt; 
    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="s-Atom"&gt;and&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="s-Atom"&gt;like&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s-Atom"&gt;o&lt;/span&gt; &lt;span class="s-Atom"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;txt&lt;/span&gt;

                &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="o"&gt;not&lt;/span&gt; &lt;span class="nn"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;option -%s requires argument&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% opt,&lt;/span&gt;
                                      &lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;Grab&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;subsequent&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt; &lt;span class="s-Atom"&gt;right&lt;/span&gt; &lt;span class="s-Atom"&gt;after&lt;/span&gt; &lt;span class="s-Atom"&gt;this&lt;/span&gt; &lt;span class="s-Atom"&gt;flag&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;be&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;arg&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;flag&lt;/span&gt;

                &lt;span class="s-Atom"&gt;optstring&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;If&lt;/span&gt; &lt;span class="s-Atom"&gt;there&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;stuff&lt;/span&gt; &lt;span class="s-Atom"&gt;after&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;all&lt;/span&gt; &lt;span class="s-Atom"&gt;of&lt;/span&gt; &lt;span class="s-Atom"&gt;it&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;argument&lt;/span&gt;

            &lt;span class="s-Atom"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;optstring&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="nn"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="s-Atom"&gt;##&lt;/span&gt; &lt;span class="nv"&gt;If&lt;/span&gt; &lt;span class="s-Atom"&gt;the&lt;/span&gt; &lt;span class="s-Atom"&gt;opstring&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s-Atom"&gt;standalone&lt;/span&gt; &lt;span class="s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;e&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;v&amp;#39;&lt;/span&gt; &lt;span class="s-Atom"&gt;from&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;-v&amp;#39;&lt;/span&gt;

            &lt;span class="s-Atom"&gt;optarg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="s-Atom"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;optarg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="s-Atom"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;args&lt;/span&gt;

&lt;span class="s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;short_has_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    ## Check that opt exists and requires an arg&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="s-Atom"&gt;for&lt;/span&gt; &lt;span class="s-Atom"&gt;i&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="nf"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;
        &lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="s-Atom"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s-Atom"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;!&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;:&amp;#39;:&lt;/span&gt;
            &lt;span class="s-Atom"&gt;return&lt;/span&gt; &lt;span class="s-Atom"&gt;shortopts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s-Atom"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;GetoptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;&amp;#39;option -%s not recognized&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;% opt, opt)&lt;/span&gt;

&lt;span class="s-Atom"&gt;if&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="s-Atom"&gt;name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s-Atom"&gt;&amp;#39;__main__&amp;#39;:&lt;/span&gt;
    &lt;span class="s-Atom"&gt;import&lt;/span&gt; &lt;span class="s-Atom"&gt;sys&lt;/span&gt;
    &lt;span class="s-Atom"&gt;print&lt;/span&gt; &lt;span class="nf"&gt;getopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s-Atom"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;a:b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alpha=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;beta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="practice"></category><category term="reading"></category><category term="command-line-parser"></category></entry><entry><title>Become A Better Programmer - How To Read Source Code</title><link href="http://pythonpracticeprojects.com/how-to-read-source-code.html" rel="alternate"></link><updated>2014-07-19T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2014-07-19:how-to-read-source-code.html</id><summary type="html">&lt;p&gt;Reading soure code has many benefits. You will discover new constructs and libraries,
 develop empathy for others maintaining your code, and most importantly learn 
how to structure your code so that it doesn't fall over from internal complexity.&lt;/p&gt;
&lt;p&gt;There is one drawback though, reading source code is darned hard. 
When I look at a new code base, this sickening feeling washes over me.
 My mind just doesn't want to dive into this perceived mess.  &lt;/p&gt;
&lt;p&gt;This is (hopefully) a normal response. When our brains sees too much novelty,
it just tends to shy away. There is nothing for our amazing biological pattern matching
machine to latch onto. The abstractions are all new. It's never seen the
class names before. Where does execution even start?&lt;/p&gt;
&lt;p&gt;The general tips I can offer are the following:
    1. Find and establish an initial base for your mind to latch onto. Usually the main entry point.
    2. Start from your base and explore the major features.
    3. Take notes on what you've seen.&lt;/p&gt;
&lt;h2&gt;Start At The Beginning.&lt;/h2&gt;
&lt;p&gt;The trick is to give your mind a starting point. Here is what I do. I just
run the program with the -h option and invoke the help. Then I copy one of the
help strings and do a search over the code base to see where this help text
is located. Usually the help invocation is pretty close to where the main entry
point to the program is.&lt;/p&gt;
&lt;h2&gt;Identify The Shape Of The Program&lt;/h2&gt;
&lt;p&gt;Once I've found the main entry point, I run a few toy examples included
in the documentation. Then I try to trace the main blocks of code
to just get a rough sketch of how the piece fit together.&lt;/p&gt;
&lt;p&gt;Is there a manager that invokes a ton of helper functions and classes? Are there
a bunch of classes that act as peers and hand control off between each 
other? Is there a main queue of tasks that gets consumed over time?&lt;/p&gt;
&lt;p&gt;Getting the big picture helps you slot in the little pieces. You tend to get
overwhelmed by the details if you try to forge ahead without understanding
the main flow.&lt;/p&gt;
&lt;h2&gt;Take Notes&lt;/h2&gt;
&lt;p&gt;I tend to take notes right in the source code. When writing I use a special
comment character (e.g #=&amp;gt; instead of the typical #) so that I can distinguish
between my own notes and the original author's comments. &lt;/p&gt;
&lt;p&gt;Make a note on all the clever tricks, confusing flows, beautiful usgae of 
programming constructs, and anything else you want to remember. If you're stuck,
you can also make a note about coming back to that particular section.&lt;/p&gt;
&lt;p&gt;By writing down your thoughts, you're really making that piece of source code your
own. Over time, the constructs you pick up will start leaking into your own works.&lt;/p&gt;
&lt;h2&gt;Becoming Your Own Person&lt;/h2&gt;
&lt;p&gt;Learning to program is a continuous process of reading code and writing code.
By exposing yourself to a variety of styles, you'll eventually develop a
unique perspective and voice. &lt;/p&gt;</summary><category term="practice"></category><category term="reading"></category><category term="command-line-parser"></category></entry><entry><title>How Google Is Making You Stupid</title><link href="http://pythonpracticeprojects.com/how-google-is-making-you-stupid.html" rel="alternate"></link><updated>2013-10-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-10-20:how-google-is-making-you-stupid.html</id><summary type="html">&lt;p&gt;&lt;img alt="Google is making you stupid" src="/static//images/lego-google.jpg" title="We are digitizing everything, including ourselves" /&gt;&lt;/p&gt;
&lt;p&gt;Do you love Google? I love Google. I spend my entire digital life nestled inside its tech-utopian arms.
 Other people love Google too. We, as a species, love Big G so much that we have promoted it from noun,
 to both adjective (Googley) and verb (to Google). Honestly, I can’t think of any other company with
 such grammatical importance.&lt;/p&gt;
&lt;p&gt;If you are similarly smitten then I have a dire warning. You are in danger right now. No, not physical danger. 
It’s a slower and more sinister type of danger like global warming.&lt;/p&gt;
&lt;p&gt;At the root of our perilous situation is a meme. A nasty little mind virus, it spreads from host to host via mental contact.&lt;/p&gt;
&lt;p&gt;Here is the meme: all knowledge is only a Google search away. You don’t know how to make brownies? Google it. 
You don’t know how to train a dog? Google it. You don’t know how to be happy? Google it.&lt;/p&gt;
&lt;p&gt;This meme has given birth to us, a generation of instruction followers. Don’t get me wrong,
 we are the gosh-darned best instruction followers the earth has ever seen. However, without a step-by-step formula,
 I would get lost in the complexities of brownie baking. No jokes.&lt;/p&gt;
&lt;p&gt;One night, I ate a particularly good home-cooked meal. It was a traditional Vietnamese meal of rice noodle in soup 
(a.k.a. pho). Wanting to make it myself, I asked my mother for the recipe. She explained it to me but the instructions were vague.
 You boil the chicken, add some vegetables, a dash of fish sauce and voila.&lt;/p&gt;
&lt;p&gt;The next time she cooked, I decided to watch. What a revelation.&lt;/p&gt;
&lt;p&gt;Me: “What did you just throw in?”&lt;/p&gt;
&lt;p&gt;Her: “Oh a bit of ginger.”&lt;/p&gt;
&lt;p&gt;Me: “Why did you not include that in the instructions?”&lt;/p&gt;
&lt;p&gt;Her: “I forgot.”&lt;/p&gt;
&lt;p&gt;Here is the revelation: there is a world of knowledge that cannot be captured in written or verbal instructions.
 Try describing how thinly to slice ginger, or how to gauge when the chicken is done boiling,
 or even how often to stir the noodles (not too often! They break apart and become soggy).&lt;/p&gt;
&lt;p&gt;We are a generation that is stuck on Betty Crocker and Ikea furniture. A digital generation. The generation of Google.&lt;/p&gt;
&lt;p&gt;But the world isn’t digital. We must confront reality and the messy analog world in order to master anything like cooking, drawing, and even programming.&lt;/p&gt;
&lt;p&gt;In Zen and the Art of Motorcycle Maintenance, the Robert Pirsig says how there are infinite ways to assemble IKEA furniture. 
Someone just picks one and records his particular process as step-by-step instructions.&lt;/p&gt;
&lt;p&gt;I’m not sure how to get back to the world of learning by experimenting, trial and error and just plain doing it over and over again until you get it right.
 Maybe I just need to fail a couple more times at self-education.&lt;/p&gt;
&lt;p&gt;The explosion of online learning is great but how do you learn something that has no roadmap?&lt;/p&gt;
&lt;p&gt;If you liked the post, help me out and share it with your Tweeps!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/share" class="twitter-share-button" data-via="louiedinh"&gt;Tweet&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');&lt;/script&gt;&lt;/p&gt;</summary><category term="hard-work"></category><category term="learning"></category><category term="Google"></category></entry><entry><title>Lisp Interpreter Project Kit Released!</title><link href="http://pythonpracticeprojects.com/lisp-released.html" rel="alternate"></link><updated>2013-10-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-10-20:lisp-released.html</id><summary type="html">&lt;p&gt;Lisp Interpreter detailed project was just released &lt;a href="http://pythonpracticeprojects.com/lisp.html"&gt;here&lt;/a&gt;. Check it out!&lt;/p&gt;</summary><category term="project-kit"></category></entry><entry><title>How Benjamin Franklin Would've Learned To Program</title><link href="http://pythonpracticeprojects.com/how-benjamin-franklin-learned-to-program.html" rel="alternate"></link><updated>2013-09-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-09-20:how-benjamin-franklin-learned-to-program.html</id><summary type="html">&lt;p&gt;&lt;img alt="Practice programming like you would practice writing" src="/static//images/writing-cursive-large.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Good programming is notoriously difficult to teach. Programming books generally
all start out in the same way: "Here is an example of an X, and here is an
example.". Teaching the building blocks is easy. There are only so many. The hard part is
teaching the consequences of each choice. The common advice is to write a lot of code to get good.
This is necessary but not sufficient. To learn we still need to decide what code to write,
and how to improve that code.&lt;/p&gt;
&lt;p&gt;We will explore the closely related field of writing to get advice on improving our craft.
In many ways programming is like writing. Both are centrally concerned with getting your
thoughts down into an easily communicated form. We find both hard because our ideas are
densly cross-linked whereas text is depressingly linear. The infinite variety of ways in 
which thoughts can be represented in text makes learning the art of writing, as well as
programming, difficult.  &lt;/p&gt;
&lt;p&gt;Thankfully, Benjamin Franklin recorded a method that he used to develop
proficiency. As evidence of his writing prowess, we need only look at the 
Amazon Biography best seller's list.  His biography is still one of the best selling 
books after x hundred years. If that's not proof then I don't know what is.&lt;/p&gt;
&lt;p&gt;Benjamin developed his method in his early teens and worked hard at practicing his craft.
Here is the exceprt with a few added line breaks for legibility.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;About this time I met with an odd volume of the Spectator. It was the third. I had never before seen any of them.
I bought it, read it over and over, and was much delighted with it. I thought the writing excellent, and wished, if possible, to imitate it.&lt;/p&gt;
&lt;p&gt;With this view I took some of the papers, and, making short hints of the sentiment in each sentence, 
laid them by a few days, and then, without looking at the book, try'd to compleat the papers again,
by expressing each hinted sentiment at length, and as fully as it had been expressed before,
in any suitable words that should come to hand. Then I compared my Spectator with the original,
discovered some of my faults, and corrected them.&lt;/p&gt;
&lt;p&gt;But I found I wanted a stock of words, or a readiness in recollecting and using them, which I thought
I should have acquired before that time if I had gone on making verses; since the continual occasion for
words of the same import, but of different length, to suit the measure, or of different sound for the rhyme,
would have laid me under a constant necessity of searching for variety, and also have tended to fix that
variety in my mind, and make me master of it. Therefore I took some of the tales and turned them into verse;
and, after a time, when I had pretty well forgotten the prose, turned them back again. I also sometimes jumbled
my collections of hints into confusion, and after some weeks endeavored to reduce them into the best order,
before I began to form the full sentences and compleat the paper. This was to teach me method in the arrangement of thoughts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;The Benjamin Franklin Programming Practice Model&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Find a program that you greatly admire and read it.&lt;/li&gt;
&lt;li&gt;Takes note on the roles, inputs, and outputs of each major component.&lt;/li&gt;
&lt;li&gt;Take notes on how the components interact.&lt;/li&gt;
&lt;li&gt;Rewrite the program.&lt;/li&gt;
&lt;li&gt;Compare your code with the original.&lt;/li&gt;
&lt;li&gt;Note where you can improve and study acccordingly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Don't just write more programs. Super charge your abilities
by studying great programs, and then trying to imitate them.&lt;/p&gt;
&lt;p&gt;How do you get better at programming? Tweet me (@practicepython) your practice methods. I would
love to hear how you practice our craft of programming.&lt;/p&gt;
&lt;p&gt;Oh and if you found this helpful, please share it with your friends. Sharing is caring :]&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/share" class="twitter-share-button" data-text="How Benjamin Franklin would've learned to program." data-via="louiedinh" data-hashtags="practiceprogramming"&gt;Tweet&lt;/a&gt;
&lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');&lt;/script&gt;&lt;/p&gt;</summary><category term="practice"></category><category term="writing"></category><category term="benjamin-franklin"></category></entry><entry><title>Just In Case Versus Just In Time Learning</title><link href="http://pythonpracticeprojects.com/just-in-case-vs-just-in-time.html" rel="alternate"></link><updated>2013-09-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-09-20:just-in-case-vs-just-in-time.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Self-education is, I firmly believe, the only kind of education there is.
― Isaac Asimov&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Every human is born with a super power: the ability to learn. Everything you
know is learned. Like all important endeavours, a lifetime of learning merits
some planning. We will classify the types of learning and then explore the
effective use of your super power.&lt;/p&gt;
&lt;p&gt;In very broad strokes, learning can be split into two categories: Just-In-Time
and Just-In-Case. School is the perfect example of Just-In-Case learning. You
are asked to do algebra, read Chaucer and argue against a geocentric universe.
Don’t you dare ask why. There is no reason. Or the reason is in some distant
future that probably isn’t going to happen anyway.On the other hand, work is an
example of Just-In-Time learning. On your first day, you have no clue how to do
the job. So you watch, and you copy and you finish the task. Why are you
learning? To get the job done because your livelihood depends on it. The
rewards are very concrete.&lt;/p&gt;
&lt;p&gt;At the heart of this split is the question of value. When will this learning
pay off? Just-In-Time learning creates immediate value. You’re learning to surf
because you have a vacation booked in two weeks. You’re reading a book because
you have a book club meeting to attend. We will consider value as simply
something that you want to have. The thing can be enjoyment, fun, fame, money,
or appearing attractive. Whatever floats your boat. Just-In-Case learning is a
risky delayed value proposition. You’re not certain it’s going to pay off. Will
studying algebra make you attractive to the opposite sex? Only time will tell.&lt;/p&gt;
&lt;p&gt;Now if you’re reading to figure out which is the One True Way, I’m going to
disappoint you. Neither Just -In-Time nor Just-In-Case is better. Schools
preach only Just-In-Case methodology. Work argues exclusively for Just-In-Time
chops. Both are lying to you.&lt;/p&gt;
&lt;p&gt;The optimal strategy comes from sound investment principles: diversify. Like
investing, allocating your capital across different asset classes with
different risk/reward profiles tends to maximize return while minimizing risk.
&lt;a href="https://www.amazon.com/dp/0071362363/ref=as_li_qf_sp_asin_til?tag=homebits04-20&amp;amp;camp=0&amp;amp;creative=0&amp;amp;linkCode=as1&amp;amp;creativeASIN=0071362363&amp;amp;adid=1BP197D23ZSJBKKX32M8&amp;amp;"&gt;[Intelligent Asset Allocator]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just-In-Time learning is like buying bonds. Safe investments that gives a very
predictable reward. You know what you need to know. You learn it. You get the
pay off. It’s all money in the bank.&lt;/p&gt;
&lt;p&gt;Just-In-Case learning is more risky, like stocks. You learn something and
expect a future reward. The future comes and you guessed wrong. D’oh. However,
once in a while you run across a problem that is solvable by something you
learned Just-in-Case. You bust out your mental tools and annihilate the
offending issue. Everyone looks at you in bewilderment and think that you must
be a goddamn genius. Boom. Just-In-Case learning. The beauty of Just-In-Case is
most stunning when applied to notoriously difficult subjects like mathematics,
programming or writing. Achieving mastery in each field requires an inordinate
amount of time. When you run into a thorny programming problem, you can’t run
off for 10 years to self educate.&lt;a href="http://norvig.com/21-days.html"&gt;[Teach Yourself Programming in 10
Years]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s up to you to determine the right mix of risky versus safe investments I
suggest using Just-In-Time learning until you are generating enough value to
sustain your lifestyle. Then invest in Just-In-Case learning and swing for the
fences.&lt;/p&gt;</summary><category term="learning"></category></entry><entry><title>Command Line Parser Project Kit Released!</title><link href="http://pythonpracticeprojects.com/command-line-parser-released.html" rel="alternate"></link><updated>2013-08-20T00:00:00+02:00</updated><author><name>Louie Dinh</name></author><id>tag:pythonpracticeprojects.com,2013-08-20:command-line-parser-released.html</id><summary type="html">&lt;p&gt;Command Line Parser detailed project was just released &lt;a href="http://pythonpracticeprojects.com/command-line-parser.html"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="project-kit"></category></entry></feed>